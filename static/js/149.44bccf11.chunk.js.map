{"version":3,"file":"static/js/149.44bccf11.chunk.js","mappings":"oKAGMA,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,UACE,uBAAII,OAFCD,EADA,KAShB,EAED,MAEAL,EAAWU,aAAe,CACxBC,KAAM,G,8ICCR,EArBmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAOpB,OACE,kBAAMA,SAPa,SAAAC,GACnBA,EAAEC,iBACFF,EAAS,CAAEG,MAAOF,EAAEG,OAAOC,OAAOC,QAClCL,EAAEG,OAAOG,OACV,EAGC,WACE,kBACEC,KAAK,OACLC,KAAK,SACLC,YAAY,gBACZC,aAAa,MACbC,UAAQ,KAEV,mBAAQJ,KAAK,SAAb,sBAGL,E,kBCyBD,EArCe,WAAO,IAAD,EACnB,GAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMnB,EAAK,UAAGkB,EAAaE,IAAI,gBAApB,QAAgC,GAqB3C,OAnBAC,EAAAA,EAAAA,YAAU,WACR,GAAc,KAAVrB,EAAJ,CAEA,IAAMsB,EAAiB,mCAAG,sGAEtBR,GAAa,GAFS,UAGCS,EAAAA,EAAAA,IAAoBvB,GAHrB,gBAGdwB,EAHc,EAGdA,KACRZ,EAAUY,EAAKC,SAEVD,EAAKC,QAAQC,QAAQC,MAAM,8BANV,kDAQtBX,EAAS,KAAMY,SARO,yBAUtBd,GAAa,GAVS,6EAAH,qDAavBQ,GAfwB,CAgBzB,GAAE,CAACtB,KAGF,6BACE,SAAC,EAAD,CAAYH,SAAUsB,IACrBN,IAAa,SAACgB,EAAA,EAAD,IACbd,IAAS,yEAAuCA,MACjD,SAAC9B,EAAA,EAAD,CAAYC,MAAOyB,MAGxB,C,+LC1CDmB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAmB,mCAAG,oGACdF,EAAAA,EAAAA,IAAA,sCAAyCC,IAD3B,cAC3BP,EAD2B,yBAG1BA,GAH0B,2CAAH,qDAMnBD,EAAmB,mCAAG,WAAMvB,GAAN,uFACd8B,EAAAA,EAAAA,IAAA,gCACQC,EADR,kBACyB/B,IAFX,cAC3BwB,EAD2B,yBAK1BA,GAL0B,2CAAH,sDAQnBS,EAAc,mCAAG,WAAM3C,GAAN,uFACTwC,EAAAA,EAAAA,IAAA,iBAAoBxC,EAApB,oBAAkCyC,IADzB,cACtBP,EADsB,yBAGrBA,GAHqB,2CAAH,sDAMdU,EAAc,mCAAG,WAAM5C,GAAN,uFACTwC,EAAAA,EAAAA,IAAA,iBAAoBxC,EAApB,4BAA0CyC,IADjC,cACtBP,EADsB,yBAGrBA,GAHqB,2CAAH,sDAMdW,EAAiB,mCAAG,WAAM7C,GAAN,uFACZwC,EAAAA,EAAAA,IAAA,iBAAoBxC,EAApB,4BAA0CyC,IAD9B,cACzBP,EADyB,yBAGxBA,GAHwB,2CAAH,qD","sources":["components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ items }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {items.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <p>{title}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.defaultProps = {\n  list: [],\n};\n\nMoviesList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import PropTypes from 'prop-types';\n\nconst SearchForm = ({ onSubmit }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ query: e.target.search.value });\n    e.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"search\"\n        placeholder=\"search movies\"\n        autoComplete=\"off\"\n        required\n      />\n      <button type=\"submit\">search</button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport Loader from 'components/Loader/Loader';\n\nimport { fetchSerchingMovies } from 'services/api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') return;\n\n    const getSerchingMovies = async () => {\n      try {\n        setIsLoading(true);\n        const { data } = await fetchSerchingMovies(query);\n        setMovies(data.results);\n\n        if (!data.results.length) alert('nothing found ðŸ˜¥');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getSerchingMovies();\n  }, [query]);\n\n  return (\n    <main>\n      <SearchForm onSubmit={setSearchParams} />\n      {isLoading && <Loader />}\n      {error && <p>Ooooops... something went wrong ðŸ˜¥ {error}</p>}\n      <MoviesList items={movies} />\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6b54f8bf57e01fb03b792219232215b2';\n\nexport const fetchTrendingMovies = async () => {\n  const data = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const fetchSerchingMovies = async query => {\n  const data = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n\n  return data;\n};\n\nexport const fetchMovieInfo = async id => {\n  const data = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const data = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const data = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n\n  return data;\n};\n"],"names":["MoviesList","items","location","useLocation","map","id","title","to","state","from","defaultProps","list","onSubmit","e","preventDefault","query","target","search","value","reset","type","name","placeholder","autoComplete","required","useState","movies","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","getSerchingMovies","fetchSerchingMovies","data","results","length","alert","message","Loader","axios","API_KEY","fetchTrendingMovies","fetchMovieInfo","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}