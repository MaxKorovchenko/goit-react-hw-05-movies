{"version":3,"file":"static/js/949.a2f457fb.chunk.js","mappings":"uQAaA,EATiB,SAAC,GAAsB,IAApBA,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SACtB,OACE,UAAC,KAAD,CAAMD,GAAIA,EAAV,WACE,SAAC,MAAD,IACCC,IAGN,ECYD,EArBkB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEXC,EAAuDD,EAAvDC,MAAOC,EAAgDF,EAAhDE,YAAaC,EAAmCH,EAAnCG,SAAUC,EAAyBJ,EAAzBI,OAAQC,EAAiBL,EAAjBK,aAG9C,OACE,gCACE,gBAAKC,IAAG,UAJK,mCAIL,OAAgBJ,GAAeK,IAAKN,EAAOO,MAAM,SACzD,wBAAKP,KACL,wCAAgBI,MAChB,qCAAaF,MACb,0CAEGC,QAFH,IAEGA,OAFH,EAEGA,EAAQK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACX,0BAAgBA,GAALD,EADA,SAMpB,ECHD,EAhBgB,WACd,OACE,gCACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMZ,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,4BAKT,E,kBC+BD,EApCqB,WAAO,IAAD,IACzB,GAA0Bc,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOZ,EAAP,KAAca,EAAd,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,SAenD,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,gHAEMC,EAAAA,EAAAA,IAAeV,GAFrB,gBAETW,EAFS,EAETA,KACRd,EAASc,GAHQ,gDAKjBZ,EAAS,KAAMa,SALE,yDAAH,qDASlBH,GACD,GAAE,CAACT,KAGF,6BACE,SAAC,EAAD,CAAUlB,GAAIsB,EAAYS,QAA1B,qBAECf,IAAS,yEAAuCA,MACjD,SAAC,EAAD,CAAWd,MAAOA,KAClB,SAAC,EAAD,KAEA,SAAC,EAAA8B,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,C,+LC3CDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAmB,mCAAG,oGACdF,EAAAA,EAAAA,IAAA,sCAAyCC,IAD3B,cAC3BP,EAD2B,yBAG1BA,GAH0B,2CAAH,qDAMnBS,EAAmB,mCAAG,WAAMC,GAAN,uFACdJ,EAAAA,EAAAA,IAAA,gCACQC,EADR,kBACyBG,IAFX,cAC3BV,EAD2B,yBAK1BA,GAL0B,2CAAH,sDAQnBD,EAAc,mCAAG,WAAMhB,GAAN,uFACTuB,EAAAA,EAAAA,IAAA,iBAAoBvB,EAApB,oBAAkCwB,IADzB,cACtBP,EADsB,yBAGrBA,GAHqB,2CAAH,sDAMdW,EAAc,mCAAG,WAAM5B,GAAN,uFACTuB,EAAAA,EAAAA,IAAA,iBAAoBvB,EAApB,4BAA0CwB,IADjC,cACtBP,EADsB,yBAGrBA,GAHqB,2CAAH,sDAMdY,EAAiB,mCAAG,WAAM7B,GAAN,uFACZuB,EAAAA,EAAAA,IAAA,iBAAoBvB,EAApB,4BAA0CwB,IAD9B,cACzBP,EADyB,yBAGxBA,GAHwB,2CAAH,qD","sources":["components/BackLink/BackLink.jsx","components/MovieCard/MovieCard.jsx","components/AddInfo/AddInfo.jsx","pages/MovieDetails.jsx","services/api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { ImArrowLeft } from 'react-icons/im';\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <Link to={to}>\n      <ImArrowLeft />\n      {children}\n    </Link>\n  );\n};\n\nexport default BackLink;\n\nBackLink.propTypes = {\n  to: PropTypes.object.isRequired,\n  children: PropTypes.node,\n};\n","import PropTypes from 'prop-types';\n\nconst MovieCard = ({ movie }) => {\n  //console.log(movie);\n  const { title, poster_path, overview, genres, vote_average } = movie;\n  const img_path = 'https://image.tmdb.org/t/p/w500';\n\n  return (\n    <section>\n      <img src={`${img_path}${poster_path}`} alt={title} width=\"300\" />\n      <h2>{title}</h2>\n      <p>User score: {vote_average}</p>\n      <p>Overview {overview}</p>\n      <p>\n        Genres:\n        {genres?.map(({ id, name }) => (\n          <span key={id}>{name}</span>\n        ))}\n      </p>\n    </section>\n  );\n};\n\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    poster_path: PropTypes.string,\n    overview: PropTypes.string,\n    vote_average: PropTypes.number,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n      })\n    ),\n  }).isRequired,\n};\n","import { Link } from 'react-router-dom';\n\nconst AddInfo = () => {\n  return (\n    <section>\n      <h2>Additional information</h2>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n    </section>\n  );\n};\n\nexport default AddInfo;\n","import { Suspense, useRef } from 'react';\nimport { useEffect, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\n\nimport BackLink from 'components/BackLink/BackLink';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport AddInfo from 'components/AddInfo/AddInfo';\nimport Loader from 'components/Loader/Loader';\n\nimport { fetchMovieInfo } from 'services/api';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? '/home');\n\n  useEffect(() => {\n    const getMovieInfo = async () => {\n      try {\n        const { data } = await fetchMovieInfo(movieId);\n        setMovie(data);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n\n    getMovieInfo();\n  }, [movieId]);\n\n  return (\n    <main>\n      <BackLink to={backLinkRef.current}>GO BACK</BackLink>\n\n      {error && <p>Ooooops... something went wrong ðŸ˜¥ {error}</p>}\n      <MovieCard movie={movie} />\n      <AddInfo />\n\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6b54f8bf57e01fb03b792219232215b2';\n\nexport const fetchTrendingMovies = async () => {\n  const data = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const fetchSerchingMovies = async query => {\n  const data = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n\n  return data;\n};\n\nexport const fetchMovieInfo = async id => {\n  const data = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const data = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const data = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n\n  return data;\n};\n"],"names":["to","children","movie","title","poster_path","overview","genres","vote_average","src","alt","width","map","id","name","useState","setMovie","error","setError","movieId","useParams","location","useLocation","backLinkRef","useRef","state","from","useEffect","getMovieInfo","fetchMovieInfo","data","message","current","Suspense","fallback","Loader","axios","API_KEY","fetchTrendingMovies","fetchSerchingMovies","query","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}